{"version":3,"sources":["Header/header.js","Report/report.js","Firebase/firebase.js","Firebase/firebaseService.js","HRPage/HRPage.js","App.js","serviceWorker.js","index.js","images/reports.png","images/validated.png"],"names":["Header","react_default","a","createElement","className","onClick","this","showTable","src","reports","alt","hideTable","validated","document","getElementById","style","display","Component","Report","header_Header","report_SingleReport","SingleReport","report_Form","Form","id","selected","value","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FirebaseService","Object","classCallCheck","db","firestore","collection","name","data","where","get","then","snapshot","forEach","snap","push","defineProperty","status","HRPage","Switch","Route","path","component","HRPage_ReportTable","HRPage_ResolvedTable","ReportTable","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","shouldRedirect","rows","setState","createRows","currentRows","_this2","statuses","j","length","getByStatus","i","rowid","datetime","key","handleClick","replace","type","handleData","Redirect","to","ResolvedTable","_this3","_this4","App","HRPage_HRPage_HRPage","Boolean","window","location","hostname","match","element","BrowserRouter","src_App_0","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mOAKqBA,0LAEb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASC,KAAKC,UAAWH,UAAU,OACvCH,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAASC,IAAI,aAE3BT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASC,KAAKK,WAClCV,EAAAC,EAAAC,cAAA,OAAKK,IAAKI,IAAWF,IAAI,qDAQ7CG,SAASC,eAAe,UAAUC,MAAMC,QAAQ,QAChDH,SAASC,eAAe,UAAUC,MAAMC,QAAQ,2CAIhDH,SAASC,eAAe,UAAUC,MAAMC,QAAQ,OAChDH,SAASC,eAAe,UAAUC,MAAMC,QAAQ,eAxBpBC,cCDfC,0LAGb,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,cANoBH,cAY9BI,mLAEE,OACIpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmB,EAAD,cAJWL,aAUrBM,mLAEE,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKqB,GAAG,UACJvB,EAAAC,EAAAC,cAAA,yBAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAQsB,SAAS,WAAWC,MAAM,aAAlC,aACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAM,OAAd,qBACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAM,aAAd,aACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAM,OAAd,uBACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAM,SAAd,2CAKZzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,SACIH,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA0BH,EAAAC,EAAAC,cAAA,oBACtBF,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,SACIH,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,gBACIH,EAAAC,EAAAC,cAAA,2BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,kBACIH,EAAAC,EAAAC,cAAA,sCAhCDc,iECfjBU,IAASC,cATE,CACTC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,iBAKNP,QAAf,ECXmBQ,aACjB,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA6B,GACX7B,KAAKgC,GAAKX,EAASY,YAAYC,WAAW,2DAG1CC,GACA,IAAIC,EAAO,GACX,OAAOpC,KAAKgC,GAAGK,MAAM,OAAQ,KAAMF,GAAMG,MAAMC,KAC3C,SAAAC,GAEI,OADAA,EAASC,QAAQ,SAAAC,GAAI,OAAIN,EAAKO,KAALb,OAAAc,EAAA,EAAAd,CAAA,GAAYY,EAAKxB,GAAKwB,EAAKN,WAC7CA,qCAMf,IAAIA,EAAO,GACX,OAAOpC,KAAKgC,GAAGM,MAAMC,KACjB,SAAAC,GAEI,OADAA,EAASC,QAAQ,SAAAC,GAAI,OAAIN,EAAKO,KAAKD,EAAKN,UACjCA,wCAMPS,GACR,IAAIT,EAAO,GACX,OAAOpC,KAAKgC,GAAGK,MAAM,SAAU,KAAMQ,GAAQP,MAAMC,KAC/C,SAAAC,GAEI,OADAA,EAASC,QAAQ,SAAAC,GAAI,OAAIN,EAAKO,KAAKD,EAAKN,UACjCA,aC1BFU,mLAEb,OACInD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACIpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWtC,KAE1CjB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,cAToBzC,aAe9B0C,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAA9B,KAAAqD,IACfE,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAA9B,KAAA8B,OAAA2B,EAAA,EAAA3B,CAAAuB,GAAAK,KAAA1D,KAAMsD,KACDK,MAAQ,CACTC,gBAAgB,EAChBC,KAAM,IAEVN,EAAKlC,SAAW,IAAIQ,EANL0B,6EAUfvD,KAAK8D,SAAS,CAACF,gBAAgB,gDAI/B5D,KAAK+D,gDAGEC,GACPhE,KAAK8D,SAAS,CAACD,KAAMG,yCAMrB,IAHS,IAAAC,EAAAjE,KACLgE,EAAc,GACdE,EAAW,CAAC,kBAAmB,YAAa,YAAa,sBAAuB,wCAC3EC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACjCnE,KAAKqB,SAASgD,YAAYH,EAASC,IAAI5B,KACnC,SAAAG,GACI,IAAK,IAAI4B,EAAI,EAAGA,EAAI5B,EAAK0B,OAAQE,IAAK,CAClC,IAAIC,EAAQ,QAAU7B,EAAK4B,GAAGE,SAAWF,EACzCN,EAAYrB,KACRhD,EAAAC,EAAAC,cAAA,UAAQ4E,IAAKF,EAAOxE,QAAS,kBAAMkE,EAAKS,gBACpC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,cAAM6C,EAAK4B,GAAGnC,KAAd,KACAxC,EAAAC,EAAAC,cAAA,KAAGC,UAAW4C,EAAK4B,GAAGzB,OAAO8B,QAAQ,OAAQ,KAA7C,IAAoDjC,EAAK4B,GAAGzB,OAA5D,MAEAlD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsB4C,EAAK4B,GAAGE,SAA9B,KACA7E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsB4C,EAAK4B,GAAGM,KAA9B,SAMxBX,EAAKY,WAAWb,sCAO5B,OAAIhE,KAAK2D,MAAMC,eACJjE,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAUnC,MAAI,EAACoC,GAAI,iBAG1BpF,EAAAC,EAAAC,cAAA,OAAKqB,GAAG,UACHlB,KAAK2D,MAAME,aAzDFlD,aA+DpBqE,cACF,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAnD,OAAAC,EAAA,EAAAD,CAAA9B,KAAAgF,IACfC,EAAAnD,OAAA0B,EAAA,EAAA1B,CAAA9B,KAAA8B,OAAA2B,EAAA,EAAA3B,CAAAkD,GAAAtB,KAAA1D,KAAMsD,KACDK,MAAQ,CACTC,gBAAgB,EAChBC,KAAM,IAEVoB,EAAK5D,SAAW,IAAIQ,EANLoD,mFAUfjF,KAAK+D,mDAIL/D,KAAK8D,SAAS,CAACF,gBAAgB,uCAGxBI,GACPhE,KAAK8D,SAAS,CAACD,KAAMG,yCAGZ,IAAAkB,EAAAlF,KACLgE,EAAc,GAClBhE,KAAKqB,SAASgD,YAAY,YAAY9B,KAClC,SAAAG,GACI,IAAK,IAAI4B,EAAI,EAAGA,EAAI5B,EAAK0B,OAAQE,IAAK,CAClC,IAAIC,EAAQ,QAAUD,EAetB,GAdAN,EAAYrB,KACRhD,EAAAC,EAAAC,cAAA,UAAQ4E,IAAKF,EAAOxE,QAAS,kBAAMmF,EAAKR,gBACpC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,cAAM6C,EAAK4B,GAAGnC,KAAd,KACAxC,EAAAC,EAAAC,cAAA,KAAGC,UAAW4C,EAAK4B,GAAGzB,OAAO8B,QAAQ,OAAQ,KAA7C,IAAoDjC,EAAK4B,GAAGzB,OAA5D,MAEAlD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsB4C,EAAK4B,GAAGE,SAA9B,KACA7E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsB4C,EAAK4B,GAAGM,KAA9B,SAKhBM,EAAKvB,MAAMC,eACX,OAAOjE,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAUnC,MAAI,EAACoC,GAAI,iBAGlCG,EAAKL,WAAWb,sCAMxB,OACIrE,EAAAC,EAAAC,cAAA,OAAKqB,GAAG,UACHlB,KAAK2D,MAAME,aAtDAlD,aCzEbwE,mLANX,OACExF,EAAAC,EAAAC,cAACuF,EAAD,aAHYzE,aCQE0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECXFC,EAAU/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,KAAehG,EAAAC,EAAAC,cAAC+F,EAAD,OAE7BC,IAASC,OAAOJ,EAASnF,SAASC,eAAe,SDwH3C,kBAAmBuF,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ecfb205e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport reports from '../images/reports.png';\nimport validated from '../images/validated.png'\nimport './header.css'\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1> WorkSafe </h1>\n                    <div className=\"tabs\">\n                        <button onClick={this.showTable} className=\"tab\">\n                            <img src={reports} alt=\"reports\" />\n                        </button>\n                        <button className=\"tab\" onClick={this.hideTable}>\n                            <img src={validated} alt=\"validated\" />\n                        </button>\n                    </div>\n            </div>\n        );\n    }\n\n    showTable() {\n        document.getElementById(\"table1\").style.display=\"block\";\n        document.getElementById(\"table2\").style.display=\"none\";\n    }\n\n    hideTable() {\n        document.getElementById(\"table1\").style.display=\"none\";\n        document.getElementById(\"table2\").style.display=\"block\";\n    }\n}","import React, { Component } from 'react';\nimport './report.css';\nimport Header from '../Header/header.js';\n\nexport default class Report extends Component {\n\n    render() {\n        return(\n            <div>\n                <Header></Header>\n                <SingleReport></SingleReport>\n            </div>\n        );\n    }\n}\n\nclass SingleReport extends Component {\n    render() {\n        return(\n            <div>\n                <Form></Form>\n            </div>\n        );\n    }\n}\n\nclass Form extends Component {\n    render() {\n        return(\n            <div className=\"form\">\n                <div id=\"header\">\n                    <h3>\n                    Report Name\n                    </h3>\n                    <div>\n                        <select>\n                            <option selected=\"selected\" value=\"validated\">Validated</option>\n                            <option value=\"tbd\">Awaiting Response</option>\n                            <option value=\"validated\">Mediation</option>\n                            <option value=\"tbd\">Formal Consequences</option>\n                            <option value=\"final\">Final Investigative Report Submitted</option>\n\n                        </select>\n                    </div>\n                </div>\n                <div className=\"reponse\"> Name:\n                    <p> Test User </p>\n                </div>\n                <div className=\"reponse\"> <p> Date: </p>\n                    <p> Date </p>\n                </div>\n                <div className=\"reponse\"> Type: \n                    <p> Type </p>\n                </div>\n                <div className=\"reponse\"> Description:\n                    <p> Description </p>\n                </div>\n                <div className=\"reponse\"> Your Response:\n                    <p> Current Status </p>\n                </div>\n            </div>\n        );\n    }\n}","import firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyDNjt0ZQR50uFWwvHiLMs3dR3OckvzteLo\",\n    authDomain: \"worksafe-630dd.firebaseapp.com\",\n    databaseURL: \"https://worksafe-630dd.firebaseio.com\",\n    projectId: \"worksafe-630dd\",\n    storageBucket: \"worksafe-630dd.appspot.com\",\n    messagingSenderId: \"866713004286\"\n  };\n\n  firebase.initializeApp(config);\n\n  export default firebase;","import firebase from './firebase';\n\nexport default class FirebaseService {\n    constructor() {\n        this.db = firebase.firestore().collection(\"reports\");\n    }\n\n    get(name) {\n        let data = []\n        return this.db.where(\"name\", \"==\", name).get().then(\n            snapshot => {\n                snapshot.forEach(snap => data.push({[snap.id]: snap.data()}));\n                return data;\n            }\n        );\n    }\n\n    getAll() {\n        let data = []\n        return this.db.get().then(\n            snapshot => {\n                snapshot.forEach(snap => data.push(snap.data()));\n                return data;\n            }\n        );\n\n    }\n\n    getByStatus(status) {\n        let data = []\n        return this.db.where(\"status\", \"==\", status).get().then(\n            snapshot => {\n                snapshot.forEach(snap => data.push(snap.data()));\n                return data;\n            }\n        );\n    }\n}","import React, { Component } from 'react';\nimport './HRPage.css';\nimport Header from '../Header/header.js'\nimport Report from '../Report/report.js';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport FirebaseService from '../Firebase/firebaseService';\n\nexport default class HRPage extends Component {\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route path=\"/report-page\" component={Report}></Route>\n                </Switch>\n                <Header></Header>\n                <ReportTable></ReportTable>\n                <ResolvedTable></ResolvedTable>\n            </div>\n        )\n    }\n}\n\nclass ReportTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shouldRedirect: false,\n            rows: []\n        };\n        this.firebase = new FirebaseService();\n    }\n\n    handleClick() {\n        this.setState({shouldRedirect: true});\n    };\n\n    componentDidMount() {\n        this.createRows();\n    }\n\n    handleData(currentRows) {\n        this.setState({rows: currentRows});\n    }\n\n    createRows() {\n        let currentRows = []\n        let statuses = [\"Awaiting Review\", \"Validated\", \"Mediation\", \"Formal Consequences\", \"Final Investigative Report Submitted\"];\n        for (var j = 0; j < statuses.length; j++) {\n            this.firebase.getByStatus(statuses[j]).then(\n                snap => {\n                    for (var i = 0; i < snap.length; i++) {\n                        var rowid = \"t1row\" + snap[i].datetime + i;\n                        currentRows.push(\n                            <button key={rowid} onClick={() => this.handleClick()}>\n                                <div className=\"rows\">\n                                    <div className=\"content\">\n                                        <div className=\"head\">\n                                            <h2> {snap[i].name} </h2>\n                                            <p className={snap[i].status.replace(/\\s+/g, '')}> {snap[i].status} </p>\n                                        </div>\n                                            <p className=\"date\"> {snap[i].datetime} </p>\n                                            <p className=\"type\"> {snap[i].type} </p>\n                                    </div>\n                                </div>\n                            </button>\n                        )\n                    }\n                    this.handleData(currentRows);\n                }\n            )\n        }\n    }\n\n    render() {\n        if (this.state.shouldRedirect) {\n            return <Redirect push to={'/report-page'} />\n        }\n        return (\n            <div id=\"table1\">\n                {this.state.rows}\n            </div>\n        );\n    }\n}\n\nclass ResolvedTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shouldRedirect: false,\n            rows: []\n        };\n        this.firebase = new FirebaseService();\n    }\n\n    componentDidMount() {\n        this.createRows();\n    }\n\n    handleClick() {\n        this.setState({shouldRedirect: true});\n    };\n\n    handleData(currentRows) {\n        this.setState({rows: currentRows});\n    }\n\n    createRows() {\n        let currentRows = []\n        this.firebase.getByStatus(\"Resolved\").then(\n            snap => {\n                for (var i = 0; i < snap.length; i++) {\n                    var rowid = \"t2row\" + i;\n                    currentRows.push(\n                        <button key={rowid} onClick={() => this.handleClick()}>\n                            <div className=\"rows\">\n                                <div className=\"content\">\n                                    <div className=\"head\">\n                                        <h2> {snap[i].name} </h2>\n                                        <p className={snap[i].status.replace(/\\s+/g, '')}> {snap[i].status} </p>\n                                    </div>\n                                        <p className=\"date\"> {snap[i].datetime} </p>\n                                        <p className=\"type\"> {snap[i].type} </p>\n                                </div>\n                            </div>\n                        </button>\n                    )\n                    if (this.state.shouldRedirect) {\n                        return <Redirect push to={'/report-page'} />\n                    }\n                }\n                this.handleData(currentRows);\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div id=\"table2\">\n                {this.state.rows}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport HRPage from './HRPage/HRPage'\n\nclass App extends Component {\n  render() {\n    return (\n      <HRPage></HRPage>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nlet element = <BrowserRouter><App /></BrowserRouter>\n\nReactDOM.render(element, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reports.9fdc5bde.png\";","module.exports = __webpack_public_path__ + \"static/media/validated.2143001a.png\";"],"sourceRoot":""}