{"version":3,"sources":["Header/Header.js","LandingPage/Tile/Tile.js","LandingPage/Divider/Divider.js","LandingPage/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Tile","this","props","pos","src","window","location","origin","imgSrc","alt","getPos","text","Divider","fact","LandingPage","missionStatement","solution","console","log","LandingPage_Tile_Tile","putPos","LandingPage_Divider_Divider","style","text-decoration","App","src_Header_Header","src_LandingPage_LandingPage","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed89401c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.scss';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-title\">\r\n                    <h3>Title</h3>\r\n                </div>\r\n                <div className=\"navbar\">\r\n                    <p className=\"link\">Home</p>\r\n                    <p className=\"link\">Dashboard</p>\r\n                    <p className=\"link selected\">About</p>\r\n                    <p className=\"link\">Profile</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Tile.scss'\r\n\r\nclass Tile extends React.Component {\r\n    getPos() {\r\n        switch(this.props.pos) {\r\n            case 0:\r\n                return \"right\";\r\n            case 1:\r\n                return \"center\";\r\n            case 2:\r\n                return \"left\";\r\n            default:\r\n                return \"right\";\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"tile\">\r\n                <img className=\"tileImage\" src={window.location.origin + this.props.imgSrc} alt=\"tile\"></img>\r\n                <div className={\"text \" + this.getPos()}>\r\n                    <p>{this.props.text ? this.props.text : \r\n                        \"Some placeholder text that will be changed down the road\"}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport './Divider.scss';\r\n\r\nclass Divider extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divider\">\r\n                <div className=\"cornerBorder topLeft\"></div>\r\n                <div className=\"dividerText\">\r\n                    <p>{this.props.fact}</p>\r\n                </div>\r\n                <div className=\"cornerBorder botRight\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Divider;","import React from 'react';\r\nimport Tile from './Tile/Tile'\r\nimport Divider from './Divider/Divider';\r\nimport './LandingPage.scss'\r\n\r\nclass LandingPage extends React.Component {\r\n    missionStatement = \"Our goal is to provide companies with a way to accurately capture and \" +\r\n            \"track reports of harassment within their companies. We hope to facilitate active \" +\r\n            \"communication between employers and their employees around the issue of workplace harassment.\";\r\n    solution = \"{Product Name} is an easy tool to report workplace harassment. Designed to capture both \" +\r\n            \"first hand and bystander reports this tool allows companies to quickly validate and address \" +\r\n            \"reports of harassment. Our tool brings greater visibility to the reporting process for the employee.\";\r\n    pos = -1;\r\n    putPos() {\r\n        this.pos += 1;\r\n        if (this.pos > 3) {\r\n            this.pos = 0;\r\n        }\r\n        console.log(this.pos)\r\n        return this.pos;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Tile imgSrc=\"/img/placeholder_image1.jpg\" text={this.missionStatement} pos={this.putPos()}></Tile>\r\n                <Divider fact=\"This is a placeholder fact that will tell the user important info\"></Divider>\r\n                <Tile imgSrc=\"/img/placeholder_image2.jpg\" text={this.solution} pos={this.putPos()}></Tile>\r\n                <Divider fact=\"This is a placeholder fact that will tell the user important info\"></Divider>\r\n                <Tile imgSrc=\"/img/placeholder_image345.jpg\" pos={this.putPos()}></Tile>\r\n                <Divider fact=\"This is a placeholder fact that will tell the user important info\"></Divider>\r\n                <Tile imgSrc=\"/img/extra_placeholder_image.jpg\"pos={this.putPos()}></Tile>\r\n                <Divider fact=\"This is a placeholder fact that will tell the user important info\"></Divider>\r\n                <div className=\"footer\">\r\n                    <p>Created by Ally Picker, Anukriti Goyal, Luke Allen, and Sagar Surana as part of the\r\n                        University of Washington iSchool\r\n                    </p>\r\n                    <p>For questions or additional information, contact <span style={{'text-decoration': 'underline'}}>Arp32@uw.edu</span></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Header from './Header/Header'\r\nimport LandingPage from './LandingPage/LandingPage'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"Header\">\r\n          <Header></Header>\r\n        </div>\r\n        <div className=\"body\">\r\n          <LandingPage></LandingPage>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}